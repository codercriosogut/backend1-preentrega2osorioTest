Estructura:
package.json
carritos.json
productos.json
src/app.js
src/routes/carts.router.js
src/routes/products.router.js
views/form.handlebars
views/realtimeproducts.handlebars
views/layouts/main.handlebars


package.json:
{
  "name": "version1",
  "version": "1.0.0",
  "main": "src/app.js",
  "type": "module",
  "scripts": {
    "start": "node src/app.js"
  },
  "dependencies": {
    "express": "^4.19.2",
    "express-handlebars": "^7.1.3",
    "socket.io": "^4.7.5"
  },
  "description": ""
}










carritos.json:
[]







productos.json:
[]










src/app.js:
import express from 'express';
import { createServer } from 'http';
import { Server } from 'socket.io';
import path from 'path';
import { fileURLToPath } from 'url';
import { engine } from 'express-handlebars';
import productsRouter from './routes/products.router.js';
import cartsRouter from './routes/carts.router.js';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

const app = express();
const server = createServer(app);
const io = new Server(server);

app.use(express.json());
app.use(express.urlencoded({ extended: true }));

// Configuración de Handlebars
app.engine('handlebars', engine());
app.set('view engine', 'handlebars');
app.set('views', path.join(__dirname, '../views'));

app.use(express.static(path.join(__dirname, '../public')));

app.use('/api/products', productsRouter);
app.use('/api/carts', cartsRouter);

let productos = [];

// Rutas para las vistas
app.get('/realtimeproducts', (req, res) => {
    res.render('realtimeproducts');
});

app.get('/form', (req, res) => {
    res.render('form');
});

io.on('connection', (socket) => {
    console.log('New client connected');

    socket.emit('updateProducts', productos);

    socket.on('addProduct', (product) => {
        productos.push(product);
        io.emit('updateProducts', productos);
    });

    socket.on('deleteProduct', (productId) => {
        productos = productos.filter(product => product.id !== productId);
        io.emit('updateProducts', productos);
    });
});

const port = 8080;
server.listen(port, () => {
    console.log(`Server is running on port ${port}`);
});












src/routes/carts.router.js:
import express from 'express';
import { promises as fs } from 'fs';

const router = express.Router();

let carritos = [];
let currentCartId = 1;
let productos = [];

async function readCarritos() {
    try {
        const data = await fs.readFile('carritos.json', 'utf8');
        carritos = JSON.parse(data);
        currentCartId = carritos.length ? Math.max(...carritos.map(c => c.id)) + 1 : 1;
    } catch (error) {
        if (error.code === 'ENOENT') {
            await fs.writeFile('carritos.json', JSON.stringify([]));
        } else {
            console.error("Error al leer el archivo", error);
        }
    }
}

async function writeCarritos() {
    try {
        await fs.writeFile('carritos.json', JSON.stringify(carritos, null, 2));
    } catch (error) {
        console.error("Error al escribir en el archivo", error);
    }
}

readCarritos();

router.post('/', async (req, res) => {
    const nuevoCarrito = {
        id: currentCartId++,
        products: []
    };

    carritos.push(nuevoCarrito);
    await writeCarritos();
    res.status(201).json(nuevoCarrito);
});

router.get('/', (req, res) => {
    const carritosConDetalles = carritos.map(carrito => {
        const productosDetallados = carrito.products.map(item => {
            const producto = productos.find(p => p.id === item.product);
            return { ...producto, quantity: item.quantity };
        });
        return { ...carrito, products: productosDetallados };
    });
    res.json(carritosConDetalles);
});

router.get('/:cid', (req, res) => {
    const carritoID = parseInt(req.params.cid);
    const carrito = carritos.find((carrito) => carrito.id === carritoID);
    if (carrito) {
        const productosDetallados = carrito.products.map(item => {
            const producto = productos.find(p => p.id === item.product);
            return { ...producto, quantity: item.quantity };
        });
        res.json(productosDetallados);
    } else {
        res.status(404).json({ mensaje: "Carrito no encontrado" });
    }
});

router.post('/:cid/product/:pid', async (req, res) => {
    const carritoID = parseInt(req.params.cid);
    const productoID = parseInt(req.params.pid);

    const carrito = carritos.find((carrito) => carrito.id === carritoID);
    if (!carrito) {
        return res.status(404).json({ mensaje: "Carrito no encontrado" });
    }

    const producto = productos.find((producto) => producto.id === productoID);
    if (!producto) {
        return res.status(404).json({ mensaje: "Producto no encontrado" });
    }

    const item = carrito.products.find(p => p.product === productoID);
    if (item) {
        item.quantity += 1;
    } else {
        carrito.products.push({ product: productoID, quantity: 1 });
    }

    await writeCarritos();
    res.status(201).json(carrito);
});

export default router;












src/routes/products.router.js:
import express from 'express';
import { promises as fs } from 'fs';

const router = express.Router();

let productos = [];
let currentId = 1;

async function readProductos() {
    try {
        const data = await fs.readFile('productos.json', 'utf8');
        productos = JSON.parse(data);
        currentId = productos.length ? Math.max(...productos.map(p => p.id)) + 1 : 1;
    } catch (error) {
        if (error.code === 'ENOENT') {
            await fs.writeFile('productos.json', JSON.stringify([]));
        } else {
            console.error("Error al leer el archivo", error);
        }
    }
}

async function writeProductos() {
    try {
        await fs.writeFile('productos.json', JSON.stringify(productos, null, 2));
    } catch (error) {
        console.error("Error al escribir en el archivo", error);
    }
}

readProductos();

router.get('/', (req, res) => {
    res.json(productos);
});

router.get('/:pid', (req, res) => {
    const productoID = parseInt(req.params.pid);
    const producto = productos.find((producto) => producto.id === productoID);
    if (producto) {
        res.json(producto);
    } else {
        res.status(404).json({ mensaje: "Producto no encontrado" });
    }
});

router.post('/', async (req, res) => {
    const { title, description, code, price, stock, category, thumbnails } = req.body;

    if (!title || !description || !code || !price || !stock || !category) {
        return res.status(400).json({
            mensajes: [
                "Debe ingresar todos los campos: title, description, code, price, stock, category",
                "A excepción de thumbnails y status que por defecto es true",
            ]
        });
    }

    const nuevoProducto = {
        id: currentId++,
        title,
        description,
        code,
        price,
        status: true,
        stock,
        category,
        thumbnails: thumbnails || []
    };

    productos.push(nuevoProducto);
    await writeProductos();
    res.status(201).json(nuevoProducto);
});

router.put('/:pid', async (req, res) => {
    const productoID = parseInt(req.params.pid);
    const producto = productos.find((producto) => producto.id === productoID);

    if (producto) {
        const { title, description, code, price, stock, category, thumbnails, status } = req.body;

        if (title !== undefined) producto.title = title;
        if (description !== undefined) producto.description = description;
        if (code !== undefined) producto.code = code;
        if (price !== undefined) producto.price = price;
        if (stock !== undefined) producto.stock = stock;
        if (category !== undefined) producto.category = category;
        if (thumbnails !== undefined) producto.thumbnails = thumbnails;
        if (status !== undefined) producto.status = status;

        await writeProductos();
        res.json(producto);
    } else {
        res.status(404).json({ mensaje: "Producto no encontrado" });
    }
});

router.delete('/:pid', async (req, res) => {
    const productoID = parseInt(req.params.pid);
    const productoIndex = productos.findIndex((producto) => producto.id === productoID);

    if (productoIndex !== -1) {
        productos.splice(productoIndex, 1);
        await writeProductos();
        res.json({ mensaje: `Producto ${productoID} eliminado` });
    } else {
        res.status(404).json({ mensaje: "Producto no encontrado" });
    }
});

export default router;












views/layouts/main.handlebars:
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>{{title}}</title>
</head>
<body>
    {{{body}}}
</body>
</html>












views/form.handlebars:
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Formulario de Producto</title>
</head>
<body>
    <h1>Agregar Producto</h1>
    <form id="productForm">
        <input type="text" id="title" placeholder="Título" required>
        <input type="text" id="description" placeholder="Descripción" required>
        <input type="text" id="code" placeholder="Código" required>
        <input type="number" id="price" placeholder="Precio" required>
        <input type="number" id="stock" placeholder="Stock" required>
        <input type="text" id="category" placeholder="Categoría" required>
        <button type="submit">Agregar Producto</button>
    </form>

    <script src="/socket.io/socket.io.js"></script>
    <script>
        const socket = io();

        const form = document.getElementById('productForm');
        form.addEventListener('submit', (event) => {
            event.preventDefault();

            const product = {
                id: Date.now(),
                title: document.getElementById('title').value,
                description: document.getElementById('description').value,
                code: document.getElementById('code').value,
                price: parseFloat(document.getElementById('price').value),
                stock: parseInt(document.getElementById('stock').value),
                category: document.getElementById('category').value,
            };

            socket.emit('addProduct', product);
            form.reset();
        });
    </script>
</body>
</html>











views/realtimeproducts.handlebars
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Productos en Tiempo Real</title>
</head>
<body>
    <h1>Productos en Tiempo Real</h1>
    <ul id="productList"></ul>

    <script src="/socket.io/socket.io.js"></script>
    <script>
        const socket = io();
        const productList = document.getElementById('productList');

        function updateProductList(productos) {
            productList.innerHTML = '';
            productos.forEach(product => {
                const li = document.createElement('li');
                li.innerHTML = `
                    ${product.title} - ${product.description}
                    <button onclick="deleteProduct(${product.id})">Eliminar</button>
                `;
                productList.appendChild(li);
            });
        }

        function deleteProduct(productId) {
            socket.emit('deleteProduct', productId);
        }

        socket.on('updateProducts', (productos) => {
            updateProductList(productos);
        });

        socket.emit('requestProducts');
    </script>
</body>
</html>











